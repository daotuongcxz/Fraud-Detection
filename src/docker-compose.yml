version: '3.8'

x-airflow-common:
  &airflow-common
  build: ./airflow
  image: airflow-training:latest
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    MLFLOW_TRACKING_URI: 'http://mlflow-server:5500'
    MLFLOW_S3_ENDPOINT_URL: 'http://minio:9000'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ./models:/app/models
    - ./config.yaml:/app/config.yaml
    - ./.env:/app/.env
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: cdc-zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc zookeeper 2181 || exit 1"]
      start_period: 10s
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fraud-detection

  broker:
    image: confluentinc/cp-server:7.5.0
    container_name: cdc-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - fraud-detection
    
  kafka-topic-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "/usr/bin/kafka-topics --create
      --if-not-exists
      --topic transactions
      --bootstrap-server broker:29092
      --partitions 1
      --replication-factor 1"
    networks:
      - fraud-detection
    restart: "no"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: cdc-schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: ["CMD-SHELL", "curl --fail --silent --insecure http://localhost:8081/subjects --output /dev/null || exit 1"]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - fraud-detection

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    container_name: cdc-control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: /connectors
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
    networks:
      - fraud-detection

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - fraud-detection

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - fraud-detection

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - fraud-detection

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - fraud-detection

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    deploy:
      mode: replicated
      replicas: 2
    networks:
      - fraud-detection

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - fraud-detection

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        ...
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - fraud-detection

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - fraud-detection

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - fraud-detection

  mc:
    image: minio/mc
    platform: linux/amd64
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      /tmp/wait-for-it.sh minio:9000 &&
      /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      /usr/bin/mc mb minio/mlflow;
      exit 0;
      "
    volumes:
      - ./wait-for-it.sh:/tmp/wait-for-it.sh
    networks:
      - fraud-detection

  minio:
    image: minio/minio
    platform: linux/amd64
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${MINIO_USERNAME}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - fraud-detection

  mlflow-server:
    build: ./mlflow
    image: mlflow-server
    container_name: mlflow-server
    restart: always
    depends_on:
      - mc
      - postgres
    ports:
      - "5500:5500"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --port 5500 --host 0.0.0.0 --backend-store-uri postgresql+psycopg2://mlflow:mlflow@postgres/mlflow --default-artifact-root s3://mlflow
    networks:
      - fraud-detection

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    env_file:
      - ./producer/.env
    volumes:
      - ./producer:/app
    working_dir: /app
    networks:
      - fraud-detection
    restart: unless-stopped

  # inference:
  #   build: ./inference
  #   env_file: .env
  #   volumes:
  #     - ./models:/app/models
  #     - ./config.yaml:/app/config.yaml
  #     - ./env:/app/.env
  #   networks:
  #     - fraud-detection

  debezium:
    image: debezium/connect:1.9
    container_name: cdc-debezium
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      # Set to Avro for higher performance
      # KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      # VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_TOPIC_CREATION_ENABLE: true
    networks:
      - fraud-detection

  # Debezium UI
  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '8082:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083,http://connector:8083
    networks:
      - fraud-detection


  postgresql:
    # Set wal_level from replica (default) to logical
    # so that Debezium can capture change
    image: postgres:latest
    command: ['postgres', '-c', 'wal_level=logical']
    container_name: cdc-postgresql
    healthcheck:
      test: ['CMD', 'psql', '-U', 'k6', '-c', 'SELECT 1']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=k6
      - POSTGRES_USER=k6
      - POSTGRES_PASSWORD=k6
    volumes: 
      - cdc_postgres_data:/var/lib/postgresql/data
    networks:
      - fraud-detection


  timescaledb:
    image: timescale/timescaledb:latest-pg13
    command: postgres -c shared_preload_libraries=timescaledb
    container_name: flink-timescaledb
    ports:
      - "5433:5432"
    healthcheck:
      test: ['CMD', 'psql', '-U', 'k6', '-c', 'SELECT 1']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - PGDATA=/var/lib/postgresql/data/timescaledb
      - POSTGRES_DB=k6
      - POSTGRES_USER=k6
      - POSTGRES_PASSWORD=k6
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - fraud-detection


  sink_data_to_db:
    build:
      context: ./sink_data/sink_to_db
      dockerfile: Dockerfile
    container_name: sink_data_to_db
    depends_on:
      - broker
    volumes:
      - ./sink_data/jars/:/app/data_ingestion/kafka_connect/jars/
    command: ["python", "datastream_api.py"]
    networks:
      - fraud-detection


  sink_data_to_topic:
    build:
      context: ./sink_data/sink_to_topic
      dockerfile: Dockerfile
    container_name: sink_data_to_topic
    depends_on:
      - broker
    volumes:
      - ./sink_data/jars/:/app/data_ingestion/kafka_connect/jars/
    command: ["python", "sink_to_topic.py"]
    networks:
      - fraud-detection


volumes:
  postgres-db-volume:
  minio_data:
  pgdata:
  cdc_postgres_data:

networks:
  fraud-detection:
    driver: bridge
